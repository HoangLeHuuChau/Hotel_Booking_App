import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart' as foundation;
import 'package:emoji_picker_flutter/emoji_picker_flutter.dart';

// M√†n h√¨nh ChatScreen cho ph√©p ng∆∞·ªùi d√πng g·ª≠i v√† nh·∫≠n tin nh·∫Øn li√™n quan ƒë·∫øn m·ªôt kh√°ch s·∫°n c·ª• th·ªÉ.
class ChatScreen extends StatefulWidget {
  final Map<String, dynamic>? hotel; // Th√¥ng tin kh√°ch s·∫°n ƒë∆∞·ª£c truy·ªÅn v√†o, c√≥ th·ªÉ null.

  const ChatScreen({super.key, this.hotel});

  @override
  State<ChatScreen> createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  final TextEditingController _messageController = TextEditingController(); // ƒêi·ªÅu khi·ªÉn vƒÉn b·∫£n nh·∫≠p tin nh·∫Øn.
  final List<Map<String, String>> _messages = []; // Danh s√°ch tin nh·∫Øn trong cu·ªôc h·ªôi tho·∫°i.
  bool _isEmojiPickerVisible = false; // Tr·∫°ng th√°i hi·ªÉn th·ªã ho·∫∑c ·∫©n b√†n ph√≠m emoji.

  @override
  void dispose() {
    // X√≥a b·ªô ƒëi·ªÅu khi·ªÉn khi widget b·ªã h·ªßy.
    _messageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final hotel = widget.hotel; // L·∫•y th√¥ng tin kh√°ch s·∫°n t·ª´ widget.

    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Chat v·ªÅ ${hotel?['name'] ?? 'Ph√≤ng'}', // Hi·ªÉn th·ªã t√™n kh√°ch s·∫°n trong ti√™u ƒë·ªÅ.
          style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        backgroundColor: Colors.blue, // M√†u n·ªÅn cho AppBar.
      ),
      body: Column(
        children: [
          if (hotel != null) _buildHotelInfo(hotel), // Hi·ªÉn th·ªã th√¥ng tin kh√°ch s·∫°n (n·∫øu c√≥).
          const Divider(height: 1), // ƒê∆∞·ªùng ngƒÉn c√°ch gi·ªØa th√¥ng tin kh√°ch s·∫°n v√† danh s√°ch tin nh·∫Øn.
          _buildMessageList(), // Hi·ªÉn th·ªã danh s√°ch tin nh·∫Øn.
          if (_isEmojiPickerVisible) _buildEmojiPicker(), // Hi·ªÉn th·ªã b√†n ph√≠m emoji n·∫øu tr·∫°ng th√°i l√† true.
          _buildMessageInput(), // Khu v·ª±c nh·∫≠p tin nh·∫Øn.
        ],
      ),
    );
  }

  // Widget hi·ªÉn th·ªã th√¥ng tin kh√°ch s·∫°n (n·∫øu c√≥).
  Widget _buildHotelInfo(Map<String, dynamic> hotel) {
    return Container(
      padding: const EdgeInsets.all(16.0),
      color: Colors.grey[200],
      child: Row(
        children: [
          ClipRRect(
            borderRadius: BorderRadius.circular(10), // Bo tr√≤n h√¨nh ·∫£nh.
            child: Image.asset(
              hotel['image'] ?? 'assets/images/default.png', // H√¨nh ·∫£nh c·ªßa kh√°ch s·∫°n ho·∫∑c ·∫£nh m·∫∑c ƒë·ªãnh.
              height: 50,
              width: 50,
              fit: BoxFit.cover, // ƒêi·ªÅu ch·ªânh h√¨nh ·∫£nh ph√π h·ª£p v·ªõi khung.
            ),
          ),
          const SizedBox(width: 16), // Kho·∫£ng c√°ch gi·ªØa ·∫£nh v√† vƒÉn b·∫£n.
          Expanded(
            child: Text(
              hotel['name'] ?? '', // T√™n kh√°ch s·∫°n.
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
        ],
      ),
    );
  }

  // Widget hi·ªÉn th·ªã danh s√°ch tin nh·∫Øn.
  Widget _buildMessageList() {
    return Expanded(
      child: ListView.builder(
        itemCount: _messages.length, // S·ªë l∆∞·ª£ng tin nh·∫Øn.
        reverse: true, // Hi·ªÉn th·ªã tin nh·∫Øn m·ªõi nh·∫•t ·ªü tr√™n c√πng.
        itemBuilder: (context, index) {
          final message = _messages[index];
          final isUserMessage = message['sender'] == 'user'; // Ki·ªÉm tra xem tin nh·∫Øn c√≥ ph·∫£i c·ªßa ng∆∞·ªùi d√πng kh√¥ng.
          return Align(
            alignment: isUserMessage
                ? Alignment.centerRight // Canh ph·∫£i cho tin nh·∫Øn ng∆∞·ªùi d√πng.
                : Alignment.centerLeft, // Canh tr√°i cho tin nh·∫Øn bot.
            child: Container(
              margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 5), // Kho·∫£ng c√°ch gi·ªØa c√°c tin nh·∫Øn.
              padding: const EdgeInsets.all(10), // L·ªÅ b√™n trong cho tin nh·∫Øn.
              decoration: BoxDecoration(
                color: isUserMessage ? Colors.blue : Colors.grey[300], // M√†u n·ªÅn cho tin nh·∫Øn.
                borderRadius: BorderRadius.circular(10), // Bo g√≥c tin nh·∫Øn.
              ),
              child: Text(
                message['text'] ?? '', // N·ªôi dung tin nh·∫Øn.
                style: TextStyle(
                  color: isUserMessage ? Colors.white : Colors.black87, // M√†u ch·ªØ t√πy thu·ªôc v√†o ng∆∞·ªùi g·ª≠i.
                ),
              ),
            ),
          );
        },
      ),
    );
  }

  // Widget hi·ªÉn th·ªã b√†n ph√≠m emoji.
  Widget _buildEmojiPicker() {
    return SizedBox(
      height: 300, // Chi·ªÅu cao c·ªßa b√†n ph√≠m emoji.
      child: EmojiPicker(
        onEmojiSelected: (Category? category, Emoji emoji) {
          setState(() {
            _messageController.text += emoji.emoji ?? ''; // Th√™m emoji v√†o tr∆∞·ªùng nh·∫≠p vƒÉn b·∫£n.
          });
        },
        textEditingController: _messageController, // Li√™n k·∫øt v·ªõi TextEditingController.
        config: Config(
          checkPlatformCompatibility: true, // Ki·ªÉm tra t∆∞∆°ng th√≠ch n·ªÅn t·∫£ng.
          emojiViewConfig: EmojiViewConfig(
            emojiSizeMax: 28 *
                (foundation.defaultTargetPlatform == TargetPlatform.iOS
                    ? 1.20 // ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc cho iOS.
                    : 1.0),
          ),
          viewOrderConfig: const ViewOrderConfig(
            top: EmojiPickerItem.categoryBar, // Thanh danh m·ª•c emoji.
            middle: EmojiPickerItem.emojiView, // Khu v·ª±c hi·ªÉn th·ªã emoji.
            bottom: EmojiPickerItem.searchBar, // Thanh t√¨m ki·∫øm emoji.
          ),
        ),
      ),
    );
  }

  // Widget hi·ªÉn th·ªã tr∆∞·ªùng nh·∫≠p tin nh·∫Øn v√† c√°c n√∫t h√†nh ƒë·ªông.
  Widget _buildMessageInput() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 8), // L·ªÅ b√™n trong.
      decoration: BoxDecoration(
        color: Colors.grey[200],
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1), // M√†u b√≥ng.
            blurRadius: 5,
            offset: const Offset(0, -2), // ƒê·ªï b√≥ng ph√≠a tr√™n.
          ),
        ],
      ),
      child: Row(
        children: [
          IconButton(
            icon: const Icon(Icons.emoji_emotions, color: Colors.blue), // N√∫t hi·ªÉn th·ªã b√†n ph√≠m emoji.
            onPressed: () {
              setState(() {
                _isEmojiPickerVisible = !_isEmojiPickerVisible; // ƒê·ªïi tr·∫°ng th√°i hi·ªÉn th·ªã b√†n ph√≠m emoji.
              });
            },
          ),
          Expanded(
            child: TextField(
              controller: _messageController, // Li√™n k·∫øt TextEditingController.
              decoration: const InputDecoration(
                hintText: 'Nh·∫≠p tin nh·∫Øn...', // G·ª£i √Ω nh·∫≠p vƒÉn b·∫£n.
                border: InputBorder.none,
              ),
              onTap: () {
                if (_isEmojiPickerVisible) {
                  setState(() {
                    _isEmojiPickerVisible = false; // ·∫®n b√†n ph√≠m emoji khi tr∆∞·ªùng nh·∫≠p ƒë∆∞·ª£c ch·ªçn.
                  });
                }
              },
            ),
          ),
          IconButton(
            icon: const Icon(Icons.send, color: Colors.blue), // N√∫t g·ª≠i tin nh·∫Øn.
            onPressed: _sendMessage, // H√†nh ƒë·ªông g·ª≠i tin nh·∫Øn.
          ),
        ],
      ),
    );
  }

  // Ph∆∞∆°ng th·ª©c x·ª≠ l√Ω g·ª≠i tin nh·∫Øn.
  void _sendMessage() {
    final text = _messageController.text.trim(); // L·∫•y n·ªôi dung tin nh·∫Øn ƒë√£ nh·∫≠p.
    if (text.isNotEmpty) {
      final processedText = _replaceEmoticonsWithEmoji(text);
      setState(() {
        _messages.insert(0, {'sender': 'user', 'text': processedText}); // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o danh s√°ch.
        _messages.insert(0, {
          'sender': 'bot',
          'text': 'C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i tin nh·∫Øn! Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi s·ªõm.', // Tin nh·∫Øn t·ª± ƒë·ªông t·ª´ bot.
        });
      });
      _messageController.clear(); // X√≥a n·ªôi dung tr∆∞·ªùng nh·∫≠p sau khi g·ª≠i.
    }
  }

  // B·∫£n ƒë·ªì thay th·∫ø k√Ω t·ª± b·∫±ng emoji
  final Map<String, String> _emojiMap = {
    ':)': 'üòä',
    ':(': '‚òπÔ∏è',
    ':D': 'üòÅ',
    ':P': 'üòã',
    ';)': 'üòâ',
  };
  /// H√†m thay th·∫ø emoticon th√†nh emoji
  String _replaceEmoticonsWithEmoji(String text) {
    _emojiMap.forEach((key, value) {
      text = text.replaceAll(key, value);
    });
    return text;
  }
}
